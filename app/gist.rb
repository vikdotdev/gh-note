require 'git'
require 'json'
require 'active_support/all'
require 'colorize'

class Gist
  def self.all
    JSON.parse(`gh api https://api.github.com/gists`).map do |gist|
      Gist.new(gist)
    end
  end

  def self.create!
    prompt = TTY::Prompt.new
    body = prompt.collect do
      key(:description).ask('Description:', required: true)

      loop do
        key(:files).values do
          key(:name).ask('Filename:', required: true)
        end

        break if prompt.no?('Add another file?')
      end
    end

    body[:files] = body[:files].inject({}) do |memo, file|
      memo.merge!(file[:name] => {
        content: '# This file was generated by gh-note extension.'
      })
      memo
    end

    json = `echo -e '#{body.to_json}' | gh api -X POST /gists --input -`
    gist = Gist.new(JSON.parse(json))
    gist.clone!
    gist
  rescue JSON::ParserError => e
    puts e
    puts json
    puts 'Error creating a gist'
    exit 1
  rescue Interrupt
    puts
    exit 130
  end

  attr_reader :id, :pull_url, :push_url, :description

  def initialize(api_json)
    @id = api_json['id']
    @push_url = api_json['git_push_url']
    @pull_url = api_json['git_pull_url']
    @description = api_json['description'].presence || api_json['files'].keys.join(' ')
    @last_updated = DateTime.parse(api_json['updated_at'])
  end

  def clone!
    puts "Cloning from #{pull_url} into #{Config.path}" if
    Git.clone(pull_url, id, path: Config.path)
  end

  def pull!
    puts "Pulling from #{pull_url} into #{Config.path}"

    Git.open(File.join(Config.path, id)).pull
  end

  def push!
    git = Git.open(File.join(Config.path, id))
    if needs_commit?(git)
      git.add(all: true)
      output = git.commit('Revision done by gh-note extension.')
      puts "Committing changes for #{id}." if output
      puts output
    end

    puts "Pushing to #{push_url}"
    git.push
  end

  def needs_commit?(git)
    status = Git::Status.new(git)

    ![status.untracked, status.changed].all?(&:blank?)
  end

  def to_s
    days = (@last_updated...Date.current).count
    last_updated_text = "Last updated #{days.zero? ? 'today' : "#{days} days ago"}."
    "#{description} #{last_updated_text.light_black}"
  end
end
